{"version":3,"sources":["../src/styled.ts"],"sourcesContent":["import mStyled from '@emotion/styled'\nimport isPropValid from '@emotion/is-prop-valid'\nimport { Theme } from './styled-system/define'\nimport { SxProps } from './types'\nimport { transform, deepMerge, isCssProp } from './utils'\n\n// 变体(variants)定义\nexport type VariantsProps = {\n  [key: string]: {\n    [key: string]: SxProps\n  }\n}\n\n// styled函数的第二个参数返回类型\nexport type StyledProps<T extends VariantsProps = VariantsProps> = {\n  base?: SxProps\n  variants?: T\n  defaultVariants?: {\n    [K in keyof T]?: keyof T[K]\n  }\n}\n\n// 样式函数参数类型，支持对象或函数形式\nexport type RecipeProps<T extends VariantsProps = VariantsProps> =\n  | StyledProps<T>\n  | ((props: { theme?: Theme }) => StyledProps<T>)\n\n// 提取组件的原始 props 类型\nexport type ComponentPropsType<C> = C extends React.ComponentType<infer P>\n  ? P\n  : C extends keyof React.JSX.IntrinsicElements\n  ? React.JSX.IntrinsicElements[C]\n  : {}\n\n// 预设样式类型\ntype PresetProp<T extends { presets?: Record<string, any> } = { presets?: any }> =\n  T['presets'] extends Record<string, any> ? { preset?: keyof T['presets'] } : {}\n\n// 合并原始 props 和 SxProps\nexport type StyledComponentProps<C, V extends VariantsProps> = Omit<\n  ComponentPropsType<C>,\n  keyof SxProps\n> &\n  SxProps & {\n    children?: React.ReactNode\n    sx?: SxProps\n  } & {\n    [K in keyof V]?: keyof V[K] extends 'true' ? boolean : keyof V[K]\n  } & PresetProp<Theme>\n\n// type ForbidSystemProps<T extends React.ComponentType<any>> = Extract<\n//   keyof React.ComponentProps<T>,\n//   keyof SxProps\n// > extends never\n//   ? T\n//   : {\n//       error: `❌ styled() 不允许组件包含系统样式属性 ${Extract<\n//         keyof React.ComponentProps<T>,\n//         keyof SxProps\n//       >}，这些属性会被 styled() 过滤，请移除`\n//     }\n\n/**使用styled创建的组件，样式相关prop将会被过滤，不会传递给children*/\nexport function styled<\n  C extends React.ComponentType<any> | React.ForwardRefExoticComponent<any>,\n  T extends VariantsProps = {}\n>(component: C, recipes?: RecipeProps<T>): React.FC<StyledComponentProps<C, T>>\n\n// 重载2：支持原生 HTML 元素\nexport function styled<Tag extends keyof React.JSX.IntrinsicElements, T extends VariantsProps = {}>(\n  component: Tag,\n  recipes?: RecipeProps<T>\n): React.FC<StyledComponentProps<Tag, T>>\n\n// styled 函数实现\nexport function styled(\n  component: React.ComponentType<any> | keyof React.JSX.IntrinsicElements,\n  recipes: RecipeProps = {}\n) {\n  return mStyled(component as any, {\n    shouldForwardProp: prop => {\n      return !(isCssProp(prop) || (typeof component === 'string' && !isPropValid(prop)))\n    }\n  })(props => {\n    const { sx, theme, preset, ...args } = props\n    let styles = typeof recipes === 'function' ? recipes({ theme, ...args }) : recipes\n    const { base = {}, variants = {}, defaultVariants = {} } = styles\n    // 支持的变体\n    const variantsAttrs = new Set(Object.keys(variants ?? {}))\n    // 分离组件的变体属性和其他样式属性\n    const usedVariants: Record<string, string> = {}\n    const otherStyles: Record<string, any> = {}\n    Object.entries(args).forEach(([key, value]) => {\n      if (variantsAttrs.has(key)) {\n        usedVariants[key] = value as string\n      } else if (isCssProp(key)) {\n        otherStyles[key] = value\n      }\n    })\n    // 实际应用的变体样式\n    const variantStyles = Object.entries({\n      ...defaultVariants,\n      ...usedVariants\n    }).reduce((acc, [key, value]: [string, any]) => {\n      return {\n        ...acc,\n        ...(variants?.[key]?.[typeof value === 'boolean' ? value.toString() : value] ?? {})\n      }\n    }, {})\n\n    const results = deepMerge(\n      // 分别转换之后合并，避免 color: { sm: 'red', md: 'blue' } 等媒体查询覆盖默认 color: 'green' 的情况\n      transform(base ?? {}, theme),\n      transform(variantStyles ?? {}, theme),\n      transform(theme?.presets?.[preset] ?? {}, theme),\n      transform(sx ?? {}, theme),\n      transform(otherStyles, theme)\n    )\n    return results\n  })\n}\n"],"mappings":";;;;;;;AAAA,OAAO,aAAa;AACpB,OAAO,iBAAiB;AA0EjB,SAAS,OACd,WACA,UAAuB,CAAC,GACxB;AACA,SAAO,QAAQ,WAAkB;AAAA,IAC/B,mBAAmB,UAAQ;AACzB,aAAO,EAAE,UAAU,IAAI,KAAM,OAAO,cAAc,YAAY,CAAC,YAAY,IAAI;AAAA,IACjF;AAAA,EACF,CAAC,EAAE,WAAS;AACV,UAAM,EAAE,IAAI,OAAO,QAAQ,GAAG,KAAK,IAAI;AACvC,QAAI,SAAS,OAAO,YAAY,aAAa,QAAQ,EAAE,OAAO,GAAG,KAAK,CAAC,IAAI;AAC3E,UAAM,EAAE,OAAO,CAAC,GAAG,WAAW,CAAC,GAAG,kBAAkB,CAAC,EAAE,IAAI;AAE3D,UAAM,gBAAgB,IAAI,IAAI,OAAO,KAAK,YAAY,CAAC,CAAC,CAAC;AAEzD,UAAM,eAAuC,CAAC;AAC9C,UAAM,cAAmC,CAAC;AAC1C,WAAO,QAAQ,IAAI,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC7C,UAAI,cAAc,IAAI,GAAG,GAAG;AAC1B,qBAAa,GAAG,IAAI;AAAA,MACtB,WAAW,UAAU,GAAG,GAAG;AACzB,oBAAY,GAAG,IAAI;AAAA,MACrB;AAAA,IACF,CAAC;AAED,UAAM,gBAAgB,OAAO,QAAQ;AAAA,MACnC,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,MAAqB;AAC9C,aAAO;AAAA,QACL,GAAG;AAAA,QACH,GAAI,WAAW,GAAG,IAAI,OAAO,UAAU,YAAY,MAAM,SAAS,IAAI,KAAK,KAAK,CAAC;AAAA,MACnF;AAAA,IACF,GAAG,CAAC,CAAC;AAEL,UAAM,UAAU;AAAA;AAAA,MAEd,UAAU,QAAQ,CAAC,GAAG,KAAK;AAAA,MAC3B,UAAU,iBAAiB,CAAC,GAAG,KAAK;AAAA,MACpC,UAAU,OAAO,UAAU,MAAM,KAAK,CAAC,GAAG,KAAK;AAAA,MAC/C,UAAU,MAAM,CAAC,GAAG,KAAK;AAAA,MACzB,UAAU,aAAa,KAAK;AAAA,IAC9B;AACA,WAAO;AAAA,EACT,CAAC;AACH;","names":[]}