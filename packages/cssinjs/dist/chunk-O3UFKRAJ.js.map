{"version":3,"sources":["../src/utils.ts","../src/custom-pseudos.ts"],"sourcesContent":["import { get } from 'styled-system'\nimport { SxProps } from './types'\nimport { Theme } from './styled-system/define'\nimport styleFn, { cssPropNames } from './styled-system/style-fn'\nimport { isCustomPseudo, customPseudos } from './custom-pseudos'\n\n// 主题变量缓存\nconst themeVarsCache = new WeakMap<object, Map<string, any>>()\n\n/**判断是否为styled-system属性 */\nexport function isSystemProp(prop: string) {\n  return cssPropNames.has(prop)\n}\n\n/**判断是否为可接受的css属性 */\nexport function isCssProp(prop: string) {\n  return isSystemProp(prop) || isCustomPseudo(prop)\n}\n\n/**将大括号包裹的css属性值(如{bg: '{colors.primary}'})转换为主题变量 */\nexport function getThemeValue(value: any, theme: Theme): any {\n  if (value && typeof value === 'object') {\n    return Object.fromEntries(Object.entries(value).map(([k, v]) => [k, getThemeValue(v, theme)]))\n  }\n  if (typeof value !== 'string' || !/^\\{[\\s\\S]*\\}$/.test(value)) {\n    return value\n  }\n  if (!themeVarsCache.has(theme)) {\n    themeVarsCache.set(theme, new Map())\n  }\n  const cache = themeVarsCache.get(theme)!\n  if (cache.has(value)) {\n    return cache.get(value)\n  } else {\n    const cssValue = get(\n      theme,\n      value.replace(/\\{([\\s\\S]*)\\}/, (_, str) => str)\n    )\n    cache.set(value, cssValue)\n    return cssValue\n  }\n}\n\n// 将styled-system对象处理为css样式对象\nexport function transform(sx: SxProps, theme: Theme) {\n  const sysStyles: Record<string, any> = {}\n  const otherStyles: Record<string, any> = {}\n  const mediaQueries: Record<string, any> = {}\n  Object.entries(sx).forEach(([k, v]) => {\n    if (isCustomPseudo(k)) {\n      k = customPseudos[k]\n    }\n    // 处理styled-system属性\n    if (isSystemProp(k)) {\n      sysStyles[k] = getThemeValue(v, theme)\n      return\n    }\n    // 处理css变量的媒体查询\n    if (k.startsWith('--') && typeof v === 'object') {\n      Object.entries(v).forEach(([k2, v2]) => {\n        const media = transformMediaQueries(k2, theme)\n        if (!media) return\n        if (!mediaQueries[media]) {\n          mediaQueries[media] = {}\n        }\n        mediaQueries[media][k] = getThemeValue(v2, theme)\n      })\n      return\n    }\n    otherStyles[k] =\n      !!v && typeof v === 'object' ? transform(v as SxProps, theme) : getThemeValue(v, theme)\n    return\n  })\n  return deepMerge(otherStyles, mediaQueries, styleFn({ theme, ...sysStyles }))\n}\n\n// 转换媒体查询\nexport function transformMediaQueries(\n  breakpoint: string,\n  theme: {\n    breakpoints?: string[] | { [size: string]: string }\n  }\n) {\n  const breakpoints = theme.breakpoints ?? []\n  const size = get(breakpoints, breakpoint)\n  if (size) return `@media screen and (min-width: ${size})`\n}\n\nexport function deepMerge<T extends object[]>(...objects: T): T[number] {\n  const result: any = {}\n  for (const obj of objects) {\n    if (!obj || typeof obj !== 'object') continue\n\n    for (const key in obj) {\n      const value = (obj as any)[key]\n\n      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        if (!result[key]) result[key] = {}\n        result[key] = deepMerge(result[key], value)\n      } else {\n        result[key] = value\n      }\n    }\n  }\n\n  return result\n}\n","export const customPseudos = {\n  _hover: ':hover',\n  _active: ':active',\n  _focus: ':focus',\n  _focusVisible: ':focus-visible',\n  _focusWithin: ':focus-within',\n  _visited: ':visited',\n  _link: ':link',\n  _checked: ':checked',\n  _readonly: ':readonly',\n  _readWrite: ':read-write',\n  _disabled: ':disabled',\n  _before: '::before',\n  _after: '::after'\n} as const\n\nexport type CustomPseudos = keyof typeof customPseudos\nexport const isCustomPseudo = (key: string): key is CustomPseudos => key in customPseudos\n"],"mappings":"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","names":[]}