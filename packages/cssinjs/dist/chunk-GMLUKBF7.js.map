{"version":3,"sources":["../src/jsx-runtime.ts"],"sourcesContent":["import * as ReactJSXRuntime from 'react/jsx-runtime'\nimport { jsx as emotionJsx, jsx as emotionJsxs } from '@emotion/react/jsx-runtime'\nimport { transform } from './utils'\nimport { SxProps } from './types'\n\nexport declare namespace JSX {\n  type IntrinsicElements = {\n    [K in keyof React.JSX.IntrinsicElements]: React.JSX.IntrinsicElements[K] & {\n      sx?: SxProps\n    }\n  }\n  interface ElementChildrenAttribute extends React.JSX.ElementChildrenAttribute {}\n}\n\nexport const jsx: typeof ReactJSXRuntime.jsx = (type, props, key) => {\n  const { sx, ...args } = props as { sx?: SxProps }\n  if (sx && typeof type === 'string') {\n    return emotionJsx(type, { ...args, css: (theme: any) => transform(sx, theme) }, key)\n  }\n  return emotionJsx(type, props, key)\n}\n\nexport const jsxs: typeof ReactJSXRuntime.jsxs = (type, props, key) => {\n  const { sx, ...args } = props as { sx?: SxProps }\n  if (sx && typeof type === 'string') {\n    return emotionJsxs(type, { ...args, css: (theme: any) => transform(sx, theme) }, key)\n  }\n  return emotionJsxs(type, props, key)\n}\n\nexport const Fragment = ReactJSXRuntime.Fragment\n"],"mappings":";;;;;AAAA,YAAY,qBAAqB;AACjC,SAAS,OAAO,YAAY,OAAO,mBAAmB;AAa/C,IAAM,MAAkC,CAAC,MAAM,OAAO,QAAQ;AACnE,QAAM,EAAE,IAAI,GAAG,KAAK,IAAI;AACxB,MAAI,MAAM,OAAO,SAAS,UAAU;AAClC,WAAO,WAAW,MAAM,EAAE,GAAG,MAAM,KAAK,CAAC,UAAe,UAAU,IAAI,KAAK,EAAE,GAAG,GAAG;AAAA,EACrF;AACA,SAAO,WAAW,MAAM,OAAO,GAAG;AACpC;AAEO,IAAM,OAAoC,CAAC,MAAM,OAAO,QAAQ;AACrE,QAAM,EAAE,IAAI,GAAG,KAAK,IAAI;AACxB,MAAI,MAAM,OAAO,SAAS,UAAU;AAClC,WAAO,YAAY,MAAM,EAAE,GAAG,MAAM,KAAK,CAAC,UAAe,UAAU,IAAI,KAAK,EAAE,GAAG,GAAG;AAAA,EACtF;AACA,SAAO,YAAY,MAAM,OAAO,GAAG;AACrC;AAEO,IAAMA,YAA2B;","names":["Fragment"]}