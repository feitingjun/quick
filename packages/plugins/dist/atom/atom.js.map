{"version":3,"sources":["../../src/atom/atom.ts"],"sourcesContent":["import { useSyncExternalStore, use } from 'react'\n\ntype GetAtom = <T>(atom:Atom<T>|CombineAtom<T>) => T\ntype SetAtom = <T>(atom:Atom<T>|CombineAtom<T>, value:T|((oldV:T) => T)) => void\ntype Read<T> = (get: GetAtom) => T | Promise<T>\ntype Write<T> = (value: T, get: GetAtom, set: SetAtom) => T\ntype WriteCombine<T> = (value: T, get: GetAtom, set: SetAtom) => void\n\n/**根据传入的atom获取值 */\nconst getAtom:GetAtom = atom => atom.get()\n/**根据传入的atom设置值 */\nconst setAtom:SetAtom = (atom, value) => atom.set(value)\n\n/** 仿 jotai 的轻量级全局状态管理库 */\nclass BaseAtom<T> {\n  /** 原子的状态 */\n  protected state!: T\n  /** 订阅者列表 */\n  protected listeners: Set<() => void> = new Set()\n  /**当前atom的自定义set函数 */\n  protected setCombine?: Write<T> | WriteCombine<unknown>\n  \n  constructor(_: T|Read<T>, setCombine?: Write<T> | WriteCombine<unknown>) {\n    this.setCombine = setCombine\n  }\n  get = (): T => {\n    return this.state\n  }\n  subscribe = (cb: () => void) => {\n    this.listeners.add(cb)\n    return () => this.listeners.delete(cb)\n  }\n}\n\n/**基本atom */\nclass Atom<T> extends BaseAtom<T> {\n  declare protected setCombine?: Write<T>\n  constructor(initValue: T, setCombine?: Write<T>) {\n    super(initValue, setCombine)\n    this.state = initValue\n  }\n  // 更新state值，触发setCombine\n  set = (value: T | ((oldV: T) => T)) => {\n    let newV = typeof value === 'function'? (value as (oldV:T) => T)(this.state) : value\n    if(this.setCombine){\n      newV = this.setCombine(newV, getAtom, setAtom)\n    }\n    this.state = newV\n    this.listeners.forEach(cb => cb())\n  }\n}\n\n/**组合atom */\nclass CombineAtom<T> extends BaseAtom<T> {\n  /** 依赖atom列表，任意一个atom变更，都会触发getCombine方法 */\n  private atoms: Set<Atom<any>|CombineAtom<any>> = new Set()\n  declare protected setCombine?: WriteCombine<any>\n  /**当前atom的自定义get函数，通常用来从其他一个或多个atom获取组合数据，如果存在此方法，此atom的state不能手动变更 */\n  private getCombine: Read<T>\n  /**初始异步加载数据的promise(供react的use方法使用，以此使组件在数据未加载完成时等待) */\n  promise: Promise<void>\n  \n  constructor(initValue: Read<T>, setCombine?: WriteCombine<any>) {\n    super(initValue, setCombine)\n    this.getCombine = initValue\n    this.promise = this.getCombineValue(true)\n  }\n  getCombineValue = async (first?:boolean) => {\n    const combines = this.getCombine(<D>(atom:Atom<D>|CombineAtom<D>) => {{\n      this.atoms.add(atom)\n      return atom.get()\n    }})\n    if(first) this.atoms.forEach(atom => atom.subscribe(this.getCombineValue))\n    const value = await combines\n    this.state = value\n    this.listeners.forEach(cb => cb())\n  }\n  set = (value: any | ((oldV: T) => void)) => {\n    const newV = typeof value === 'function' ? (value as (oldV:T) => T)(this.state) : value\n    if(this.setCombine) this.setCombine(newV, getAtom, setAtom)\n  }\n}\n\n/**\n * 创建一个atom\n * @param initValue \n ** initValue 为函数时，提供一个get方法，用于获取其他atom的state，initValue的返回值为atom的state，这个函数会在组件挂载和依赖的atom变更时执行\n ** initValue 不为函数时，以initValue为atom的state\n * @param setCombine \n ** 当state变更时，会执行此方法，可在此方法内变更其他atom的state\n * @returns atom\n */\nexport function atom<T, D>(initValue: Read<T>, setCombine?: WriteCombine<D>): CombineAtom<T>;\nexport function atom<T>(initValue: T, setCombine?: Write<T>): Atom<T>;\nexport function atom<T, D>(initValue: T | Read<T>, setCombine?: Write<T>|WriteCombine<D>){\n  if(typeof initValue === 'function'){\n    return new CombineAtom(initValue as Read<T>, setCombine)\n  }\n  return new Atom(initValue as T, setCombine as Write<T>)\n}\n\n/**\n * 用于获取atom的state和setState方法\n * @param atom atom方法创建的实例\n */\nexport function useAtom<T>(atom: Atom<T>): [T, Atom<T>['set']]\nexport function useAtom<T>(atom: CombineAtom<T>): [T, CombineAtom<T>['set']]\nexport function useAtom<T>(atom: Atom<T>|CombineAtom<T>){\n  if(atom instanceof CombineAtom && atom.promise) use(atom.promise)\n  const state = useSyncExternalStore(\n    atom.subscribe,\n    atom.get\n  )\n  return [state, atom.set]\n}\n/**\n * 用于获取组合atom的state\n * @param atom atom方法创建的实例\n */\nexport function useAtomValue<T>(atom: Atom<T> | CombineAtom<T>){\n  if(atom instanceof CombineAtom && atom.promise) use(atom.promise)\n  return useSyncExternalStore(\n    atom.subscribe,\n    atom.get\n  )\n}\n/**\n * 用于获取atom的setState方法\n * @param atom atom方法创建的实例\n */\nexport function useSetAtom<T>(atom: Atom<T> | CombineAtom<T>){\n  return atom.set\n}"],"mappings":";AAAA,SAAS,sBAAsB,WAAW;AAS1C,IAAM,UAAkB,CAAAA,UAAQA,MAAK,IAAI;AAEzC,IAAM,UAAkB,CAACA,OAAM,UAAUA,MAAK,IAAI,KAAK;AAGvD,IAAM,WAAN,MAAkB;AAAA;AAAA,EAEN;AAAA;AAAA,EAEA,YAA6B,oBAAI,IAAI;AAAA;AAAA,EAErC;AAAA,EAEV,YAAY,GAAc,YAA+C;AACvE,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,MAAM,MAAS;AACb,WAAO,KAAK;AAAA,EACd;AAAA,EACA,YAAY,CAAC,OAAmB;AAC9B,SAAK,UAAU,IAAI,EAAE;AACrB,WAAO,MAAM,KAAK,UAAU,OAAO,EAAE;AAAA,EACvC;AACF;AAGA,IAAM,OAAN,cAAsB,SAAY;AAAA,EAEhC,YAAY,WAAc,YAAuB;AAC/C,UAAM,WAAW,UAAU;AAC3B,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA,EAEA,MAAM,CAAC,UAAgC;AACrC,QAAI,OAAO,OAAO,UAAU,aAAa,MAAwB,KAAK,KAAK,IAAI;AAC/E,QAAG,KAAK,YAAW;AACjB,aAAO,KAAK,WAAW,MAAM,SAAS,OAAO;AAAA,IAC/C;AACA,SAAK,QAAQ;AACb,SAAK,UAAU,QAAQ,QAAM,GAAG,CAAC;AAAA,EACnC;AACF;AAGA,IAAM,cAAN,cAA6B,SAAY;AAAA;AAAA,EAE/B,QAAyC,oBAAI,IAAI;AAAA;AAAA,EAGjD;AAAA;AAAA,EAER;AAAA,EAEA,YAAY,WAAoB,YAAgC;AAC9D,UAAM,WAAW,UAAU;AAC3B,SAAK,aAAa;AAClB,SAAK,UAAU,KAAK,gBAAgB,IAAI;AAAA,EAC1C;AAAA,EACA,kBAAkB,OAAO,UAAmB;AAC1C,UAAM,WAAW,KAAK,WAAW,CAAIA,UAAgC;AAAC;AACpE,aAAK,MAAM,IAAIA,KAAI;AACnB,eAAOA,MAAK,IAAI;AAAA,MAClB;AAAA,IAAC,CAAC;AACF,QAAG,MAAO,MAAK,MAAM,QAAQ,CAAAA,UAAQA,MAAK,UAAU,KAAK,eAAe,CAAC;AACzE,UAAM,QAAQ,MAAM;AACpB,SAAK,QAAQ;AACb,SAAK,UAAU,QAAQ,QAAM,GAAG,CAAC;AAAA,EACnC;AAAA,EACA,MAAM,CAAC,UAAqC;AAC1C,UAAM,OAAO,OAAO,UAAU,aAAc,MAAwB,KAAK,KAAK,IAAI;AAClF,QAAG,KAAK,WAAY,MAAK,WAAW,MAAM,SAAS,OAAO;AAAA,EAC5D;AACF;AAaO,SAAS,KAAW,WAAwB,YAAsC;AACvF,MAAG,OAAO,cAAc,YAAW;AACjC,WAAO,IAAI,YAAY,WAAsB,UAAU;AAAA,EACzD;AACA,SAAO,IAAI,KAAK,WAAgB,UAAsB;AACxD;AAQO,SAAS,QAAWA,OAA6B;AACtD,MAAGA,iBAAgB,eAAeA,MAAK,QAAS,KAAIA,MAAK,OAAO;AAChE,QAAM,QAAQ;AAAA,IACZA,MAAK;AAAA,IACLA,MAAK;AAAA,EACP;AACA,SAAO,CAAC,OAAOA,MAAK,GAAG;AACzB;AAKO,SAAS,aAAgBA,OAA+B;AAC7D,MAAGA,iBAAgB,eAAeA,MAAK,QAAS,KAAIA,MAAK,OAAO;AAChE,SAAO;AAAA,IACLA,MAAK;AAAA,IACLA,MAAK;AAAA,EACP;AACF;AAKO,SAAS,WAAcA,OAA+B;AAC3D,SAAOA,MAAK;AACd;","names":["atom"]}