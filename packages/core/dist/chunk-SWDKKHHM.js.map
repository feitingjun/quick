{"version":3,"sources":["../src/vite-plugin.ts"],"sourcesContent":["import { PluginOption, UserConfig as ViteConfig, mergeConfig } from 'vite'\nimport { readFileSync, writeFileSync, existsSync } from 'fs'\nimport { resolve, relative } from 'path'\nimport { globSync } from 'glob'\nimport { renderHbsTpl, debounce } from '@quick/utils'\nimport {\n  QuickConfig,\n  RouteManifest,\n  AddFileOptions,\n  PluginWatcher,\n  PluginOptions,\n  Plugin,\n  MakePropertyOptional\n} from './types'\nimport { createTmpDir, writeEntryTsx, writeRoutesTs } from './writeFile'\n\n/**是否需要重新生成路由 */\nfunction needGenerateRoutes(path: string, srcDir = 'src') {\n  // 匹配src目录下的layout(s).tsx | layout(s)/index.tsx\n  const regex = new RegExp(`^${srcDir}/(layout|layouts)(?:/index)?.tsx$`)\n  const isRootLayout = regex.test(path)\n  // 匹配以(.)page.tsx | (.)layout.tsx | layout/index.tsx 结尾且page.tsx不在layout(s)下的文件\n  const isPageOrLayout =\n    /^(?:(?!.*(layout|layouts)\\/.*page\\.tsx).)*\\/((\\S+\\.)?page\\.tsx|(\\S+\\.)?layout\\.tsx|layout\\/index\\.tsx)$/.test(\n      path\n    )\n  // 是否在指定的pages目录下\n  const inPagesDir = existsSync(resolve(process.cwd(), srcDir, 'pages'))\n    ? path.startsWith(`${srcDir}/pages`)\n    : path.startsWith(srcDir)\n  return (\n    isRootLayout ||\n    (isPageOrLayout && inPagesDir) ||\n    path === srcDir ||\n    path === `${srcDir}/pages`\n  )\n}\n\n/**生成路由清单 */\nfunction generateRouteManifest(src: string = 'src') {\n  const srcDir = resolve(process.cwd(), src)\n  // 获取页面根目录\n  const pageDir = existsSync(srcDir + '/pages') ? 'pages' : ''\n  // 获取全局layout\n  const rootLayout = globSync('layout{s,}{/index,}.tsx', { cwd: srcDir })\n  // 获取所有页面\n  const include = [\n    '**/{*.,}page.tsx',\n    '**/{*.,}layout.tsx',\n    '**/layout/index.tsx',\n    '**/404{/index,}.tsx'\n  ]\n  const ignore = ['**/layout/**/*{[^/],}page.tsx', '**/layout/**/layout.tsx']\n  const pages = globSync(include, { cwd: resolve(srcDir, pageDir), ignore })\n  // 获取id和文件的映射\n  const idpaths = pages.reduce((prev, file) => {\n    const id = file\n      // 去除路径中文件夹为index的部分\n      .replace(/index\\//, '')\n      // 去除结尾的index.tsx(layout才有) | (/)page.tsx | (/).page.tsx | (/)index.page.tsx\n      .replace(/\\/?((index)|((((\\/|^)index)?\\.)?page))?\\.tsx$/, '')\n      // 将user.detail 转换为 user/detail格式(简化目录层级)\n      .replace('.', '/')\n      // 将$id转换为:id\n      .replace(/\\$(\\w+)/, ':$1')\n      // 将$转换为通配符*\n      .replace(/\\$$/, '*')\n      // 将404转换为通配符*\n      .replace(/404$/, '*')\n    prev[id || '/'] = file\n    return prev\n  }, {} as Record<string, string>)\n  const ids = Object.keys(idpaths).sort((a, b) => {\n    const nA = a.replace(/\\/?layout/, ''),\n      nB = b.replace(/\\/?layout/, '')\n    return nA.length === nB.length ? a.indexOf('layout') : nB.length - nA.length\n  })\n\n  // 生成路由清单\n  const routesManifest = ids.reduce((prev, id, index) => {\n    const parentId = ids.slice(index + 1).find(v => {\n      return v.endsWith('layout') && id.startsWith(v.replace(/\\/?layout/, ''))\n    })\n    const regex = new RegExp(\n      `^${parentId?.replace(/\\/?layout$/, '')}/?|/?layout$`,\n      'g'\n    )\n    return {\n      ...prev,\n      [id]: {\n        id,\n        parentId,\n        path: id === '/' ? '' : id.replace(regex, ''),\n        pathname: id.replace(/\\/?layout?$/, ''),\n        file: resolve(srcDir, pageDir, idpaths[id]),\n        layout: id.endsWith('layout')\n      }\n    }\n  }, {} as RouteManifest)\n\n  if (rootLayout.length > 0 && pageDir) {\n    Object.values(routesManifest).forEach(v => {\n      if (!v.parentId) v.parentId = 'rootLayout'\n    })\n    routesManifest['rootLayout'] = {\n      id: 'rootLayout',\n      path: '',\n      pathname: '',\n      file: resolve(srcDir, rootLayout[0]),\n      layout: true\n    }\n  }\n  return routesManifest\n}\n\n/**监听路由文件变化 */\nasync function watchRoutes(event: string, path: string, srcDir = 'src') {\n  // 获取项目根目录的的路径\n  path = relative(process.cwd(), path)\n  // 重新生成路由\n  if (event !== 'change' && needGenerateRoutes(path)) {\n    writeRoutesTs(\n      resolve(process.cwd(), '.quick'),\n      generateRouteManifest(srcDir)\n    )\n  }\n}\n\nasync function loadPlugins(plugins: Plugin[], config: QuickConfig) {\n  // 运行时配置\n  const runtimes: string[] = []\n  // 额外的pageConfig类型\n  const pageConfigTypes: any[] = []\n  // 额外的appConfig类型\n  const appConfigTypes: any[] = []\n  // 从quick命名空间导出的模块\n  const exports: (any & { type?: boolean })[] = []\n  // 在入口文件中导入的模块\n  const imports: any[] = []\n  // 在入口文件顶部插入的代码\n  const aheadCodes: string[] = []\n  // 在入口文件尾部插入的代码\n  const tailCodes: string[] = []\n  // 文件变更时触发的函数\n  const watchers: PluginWatcher[] = []\n  // vite配置\n  let viteConfig: ViteConfig = {}\n  const modifyUserConfig: PluginOptions['modifyUserConfig'] = fn => {\n    config = fn(config)\n  }\n  const addFile: PluginOptions['addFile'] = ({ content, outPath }) => {\n    writeFileSync(outPath, content)\n  }\n  const addFileTemplate: PluginOptions['addFileTemplate'] = options => {\n    renderHbsTpl(options)\n  }\n  const addPageConfigType: PluginOptions['addPageConfigType'] = options => {\n    pageConfigTypes.push(options)\n  }\n  const addAppConfigType: PluginOptions['addAppConfigType'] = options => {\n    appConfigTypes.push(options)\n  }\n  const addExport: PluginOptions['addExport'] = options => {\n    exports.push(options)\n  }\n  const addEntryImport: PluginOptions['addEntryImport'] = options => {\n    imports.push(options)\n  }\n  const addEntryCodeAhead: PluginOptions['addEntryCodeAhead'] = code => {\n    aheadCodes.push(code)\n  }\n  const addEntryCodeTail: PluginOptions['addEntryCodeTail'] = code => {\n    tailCodes.push(code)\n  }\n  const addWatch: PluginOptions['addWatch'] = fn => {\n    watchers.push(fn)\n  }\n  const mergeViteConfig: PluginOptions['mergeViteConfig'] = (\n    config: ViteConfig\n  ) => {\n    viteConfig = mergeConfig(viteConfig, config)\n  }\n  // 解析quick插件\n  if (plugins && plugins.length > 0) {\n    // 动态导入package.json\n    const pkgText = readFileSync(`${process.cwd()}/package.json`, 'utf-8')\n    const pkg = JSON.parse(pkgText)\n    // 执行quick插件\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i]\n      const { setup, runtime } = plugin\n      const context = {\n        mode: process.env.NODE_ENV as ViteConfig['mode'],\n        root: process.cwd(),\n        srcDir: config.srcDir ?? 'src',\n        userConfig: config,\n        pkg\n      }\n      if (runtime) runtimes.push(runtime)\n      await setup?.({\n        context,\n        modifyUserConfig,\n        addFile,\n        addFileTemplate,\n        addPageConfigType,\n        addAppConfigType,\n        addExport,\n        addEntryImport,\n        addEntryCodeAhead,\n        addEntryCodeTail,\n        addWatch,\n        mergeViteConfig\n      })\n    }\n  }\n  return {\n    pageConfigTypes,\n    appConfigTypes,\n    exports,\n    imports,\n    aheadCodes,\n    tailCodes,\n    runtimes,\n    watchers,\n    viteConfig\n  }\n}\n/**加载全局样式文件 */\nfunction loadGlobalStyle(\n  srcDir: string,\n  {\n    imports,\n    aheadCodes,\n    tailCodes,\n    watchers\n  }: {\n    imports: MakePropertyOptional<AddFileOptions, 'specifier'>[]\n    aheadCodes: string[]\n    tailCodes: string[]\n    watchers: PluginWatcher[]\n  }\n) {\n  // 判断是否存在global.less文件\n  const globalStyle = globSync(`${srcDir}/global.{less,scss,css}`, {\n    cwd: process.cwd()\n  })\n  if (globalStyle && globalStyle.length > 0) {\n    imports.push({ source: `${process.cwd()}/${globalStyle[0]}` })\n  }\n  // 添加一个监听global.less增删的监听器\n  watchers.push((event, path) => {\n    const reg = new RegExp(\n      `^${process.cwd()}/${srcDir}/global.(less|scss|css)$`\n    )\n    if (!reg.test(path)) return\n    if (event === 'add') {\n      imports.push({ source: path })\n      writeEntryTsx(resolve(process.cwd(), '.quick'), srcDir, {\n        imports,\n        aheadCodes,\n        tailCodes\n      })\n    } else if (event === 'unlink') {\n      imports.splice(\n        imports.findIndex(v => v.source === path),\n        1\n      )\n      writeEntryTsx(resolve(process.cwd(), '.quick'), srcDir, {\n        imports,\n        aheadCodes,\n        tailCodes\n      })\n    }\n  })\n}\n\n/**vite插件，负责解析配置，生成约定式路由，以及提供quick插件功能*/\nexport default function QucikCore(quickonfig: QuickConfig = {}): PluginOption {\n  const { srcDir = 'src', plugins = [] } = quickonfig\n  let watchers: PluginWatcher[] = []\n  return {\n    name: 'quick-core',\n    enforce: 'pre',\n    config: async () => {\n      // 用户配置文件变更时重置\n      watchers = []\n      const {\n        pageConfigTypes,\n        appConfigTypes,\n        exports,\n        imports,\n        aheadCodes,\n        tailCodes,\n        runtimes,\n        watchers: pluginWatchers,\n        viteConfig\n      } = await loadPlugins(plugins, quickonfig)\n      watchers = pluginWatchers\n      loadGlobalStyle(srcDir, { imports, aheadCodes, tailCodes, watchers })\n      // 创建临时文件夹\n      createTmpDir({\n        root: process.cwd(),\n        srcDir,\n        options: {\n          manifest: generateRouteManifest(srcDir),\n          pageConfigTypes,\n          appConfigTypes,\n          exports,\n          imports,\n          aheadCodes,\n          tailCodes,\n          runtimes\n        }\n      })\n      // 返回的配置将与原有的配置深度合并\n      return mergeConfig(\n        {\n          resolve: {\n            alias: {\n              '@': resolve(process.cwd(), srcDir.split('/')[0]),\n              quick: resolve(process.cwd(), '.quick'),\n              '/quick.tsx': resolve(process.cwd(), '.quick', 'entry.tsx')\n            }\n          },\n          build: {\n            rollupOptions: {\n              input: {\n                quick: resolve(process.cwd(), '.quick', 'entry.tsx'),\n                main: 'index.html'\n              }\n            }\n          }\n        },\n        viteConfig\n      )\n    },\n    configureServer: server => {\n      server.watcher.on('all', (event, path, stats) => {\n        debounce(() => watchRoutes(event, path, srcDir), 150)()\n        watchers.forEach(fn => fn(event, path, stats))\n      })\n    }\n  }\n}\n"],"mappings":"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","names":["config"]}