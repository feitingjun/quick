{"version":3,"sources":["../src/writeFile.ts"],"sourcesContent":["import { readFileSync } from 'fs'\nimport { resolve } from 'path'\nimport { renderHbsTpl } from '@quick/utils'\n\nconst __dirname = import.meta.dirname\nconst TML_DIR = resolve(__dirname, 'template')\n\n/**写入package.json文件 */\nexport function writePackageJson(root: string, description: string) {\n  const isDev = process.argv.includes('--development')\n  const appPackageJson = readFileSync(\n    resolve(__dirname, '../../app', 'package.json'),\n    'utf-8'\n  )\n  const corePackageJson = readFileSync(\n    resolve(__dirname, '../../core', 'package.json'),\n    'utf-8'\n  )\n  const appVersion = JSON.parse(appPackageJson).version\n  const coreVersion = JSON.parse(corePackageJson).version\n\n  const path = root.split('/')\n  renderHbsTpl({\n    sourcePath: resolve(TML_DIR, 'package.json.hbs'),\n    outPath: resolve(root, 'package.json'),\n    data: {\n      projectName: path[path.length - 1],\n      description,\n      appVersion: isDev ? 'workspace:*' : appVersion,\n      coreVersion: isDev ? 'workspace:*' : coreVersion\n    }\n  })\n}\n\n/**写入tsconfig.json文件 */\nexport function writeTsConfigJson(root: string, srcDir: string) {\n  renderHbsTpl({\n    sourcePath: resolve(TML_DIR, 'tsconfig.json.hbs'),\n    outPath: resolve(root, 'tsconfig.json'),\n    data: { srcDir, srcDirRoot: srcDir.split('/')[0] }\n  })\n}\n\n/**写入app.ts文件 */\nexport function writeAppTs(root: string, srcDir: string) {\n  renderHbsTpl({\n    sourcePath: resolve(TML_DIR, 'app.tsx.hbs'),\n    outPath: resolve(root, srcDir, 'app.tsx')\n  })\n}\n\n/**写入page.tsx文件 */\nexport function writeIndexPageTsx(root: string, srcDir: string) {\n  renderHbsTpl({\n    sourcePath: resolve(TML_DIR, 'page.tsx.hbs'),\n    outPath: resolve(root, srcDir, 'page.tsx')\n  })\n}\n\n/**写入vite.config.ts文件 */\nexport function writeViteConfigTs(root: string) {\n  renderHbsTpl({\n    sourcePath: resolve(TML_DIR, 'vite.config.ts.hbs'),\n    outPath: resolve(root, 'vite.config.ts')\n  })\n}\n\n/**写入index.html */\nexport function writeIndexHtml(root: string) {\n  renderHbsTpl({\n    sourcePath: resolve(TML_DIR, 'index.html.hbs'),\n    outPath: resolve(root, 'index.html')\n  })\n}\n"],"mappings":";AAAA,SAAS,oBAAoB;AAC7B,SAAS,eAAe;AACxB,SAAS,oBAAoB;AAE7B,IAAM,YAAY,YAAY;AAC9B,IAAM,UAAU,QAAQ,WAAW,UAAU;AAGtC,SAAS,iBAAiB,MAAc,aAAqB;AAClE,QAAM,QAAQ,QAAQ,KAAK,SAAS,eAAe;AACnD,QAAM,iBAAiB;AAAA,IACrB,QAAQ,WAAW,aAAa,cAAc;AAAA,IAC9C;AAAA,EACF;AACA,QAAM,kBAAkB;AAAA,IACtB,QAAQ,WAAW,cAAc,cAAc;AAAA,IAC/C;AAAA,EACF;AACA,QAAM,aAAa,KAAK,MAAM,cAAc,EAAE;AAC9C,QAAM,cAAc,KAAK,MAAM,eAAe,EAAE;AAEhD,QAAM,OAAO,KAAK,MAAM,GAAG;AAC3B,eAAa;AAAA,IACX,YAAY,QAAQ,SAAS,kBAAkB;AAAA,IAC/C,SAAS,QAAQ,MAAM,cAAc;AAAA,IACrC,MAAM;AAAA,MACJ,aAAa,KAAK,KAAK,SAAS,CAAC;AAAA,MACjC;AAAA,MACA,YAAY,QAAQ,gBAAgB;AAAA,MACpC,aAAa,QAAQ,gBAAgB;AAAA,IACvC;AAAA,EACF,CAAC;AACH;AAGO,SAAS,kBAAkB,MAAc,QAAgB;AAC9D,eAAa;AAAA,IACX,YAAY,QAAQ,SAAS,mBAAmB;AAAA,IAChD,SAAS,QAAQ,MAAM,eAAe;AAAA,IACtC,MAAM,EAAE,QAAQ,YAAY,OAAO,MAAM,GAAG,EAAE,CAAC,EAAE;AAAA,EACnD,CAAC;AACH;AAGO,SAAS,WAAW,MAAc,QAAgB;AACvD,eAAa;AAAA,IACX,YAAY,QAAQ,SAAS,aAAa;AAAA,IAC1C,SAAS,QAAQ,MAAM,QAAQ,SAAS;AAAA,EAC1C,CAAC;AACH;AAGO,SAAS,kBAAkB,MAAc,QAAgB;AAC9D,eAAa;AAAA,IACX,YAAY,QAAQ,SAAS,cAAc;AAAA,IAC3C,SAAS,QAAQ,MAAM,QAAQ,UAAU;AAAA,EAC3C,CAAC;AACH;AAGO,SAAS,kBAAkB,MAAc;AAC9C,eAAa;AAAA,IACX,YAAY,QAAQ,SAAS,oBAAoB;AAAA,IACjD,SAAS,QAAQ,MAAM,gBAAgB;AAAA,EACzC,CAAC;AACH;AAGO,SAAS,eAAe,MAAc;AAC3C,eAAa;AAAA,IACX,YAAY,QAAQ,SAAS,gBAAgB;AAAA,IAC7C,SAAS,QAAQ,MAAM,YAAY;AAAA,EACrC,CAAC;AACH;","names":[]}